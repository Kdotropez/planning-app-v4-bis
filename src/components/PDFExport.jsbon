import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format, parse, addDays } from 'date-fns';
import { fr } from 'date-fns/locale';

const exportEmployeeSummaryToPDF = (employee, planning, timeSlotConfig, selectedShop, selectedWeek, days, getCouleurJour) => {
    try {
        if (!employee || !planning || !timeSlotConfig || !selectedShop || !selectedWeek || !days || !getCouleurJour) {
            throw new Error('Missing required parameters');
        }

        console.log('PDFExport: Generating employee summary for', { employee, selectedShop, selectedWeek });
        console.log('PDFExport: timeSlotConfig:', timeSlotConfig);
        console.log('PDFExport: planning:', planning);

        const doc = new jsPDF({ format: 'a4' });
        doc.setFont('Helvetica', 'normal');
        doc.setFontSize(12);
        doc.text(`Récapitulatif de ${employee} - ${selectedShop}`, 10, 10);
        const monday = new Date(selectedWeek);
        const sunday = addDays(monday, 6);
        doc.text(`Semaine du lundi ${format(monday, 'dd MMMM', { locale: fr })} au dimanche ${format(sunday, 'dd MMMM', { locale: fr })}`, 10, 20);

        const tableData = days.map((day, index) => {
            const slots = [
                ...(timeSlotConfig.morning || []),
                ...(timeSlotConfig.earlyAfternoon || []),
                ...(timeSlotConfig.lateAfternoon || []),
                ...(timeSlotConfig.earlyEvening || []),
                ...(timeSlotConfig.lateEvening || []),
            ].filter(slot => slot);

            let dailyHours = 0;
            let entry = '', pause = '', retour = '', sortie = '';

            const assignedSlots = slots.filter(slot => planning[`${day}_${slot}_${employee}`]);
            console.log('PDFExport: Assigned slots for', day, employee, ':', assignedSlots);
            if (assignedSlots.length > 0) {
                entry = assignedSlots[0].split('-')[0];
                sortie = assignedSlots[assignedSlots.length - 1].split('-')[1];
                if (assignedSlots.length > 1) {
                    for (let i = 0; i < assignedSlots.length - 1; i++) {
                        const currentEnd = assignedSlots[i].split('-')[1];
                        const nextStart = assignedSlots[i + 1].split('-')[0];
                        const currentEndTime = parseInt(currentEnd.replace(':', ''));
                        const nextStartTime = parseInt(nextStart.replace(':', ''));
                        if (nextStartTime - currentEndTime >= 100) { // Écart d’1 heure pour détecter une pause
                            pause = currentEnd;
                            retour = nextStart;
                            break;
                        }
                    }
                }
                if (!pause) {
                    pause = sortie;
                    retour = '-';
                }
            }

            dailyHours = assignedSlots.reduce((sum, slot) => {
                const [start, end] = slot.split('-');
                const startMinutes = parseInt(start.split(':')[0]) * 60 + parseInt(start.split(':')[1]);
                const endMinutes = end === '24:00' ? 24 * 60 : parseInt(end.split(':')[0]) * 60 + parseInt(end.split(':')[1]);
                return sum + (endMinutes - startMinutes) / 60;
            }, 0);

            return [
                day,
                employee,
                entry || 'Repos',
                pause || '-',
                retour || '-',
                sortie || '-',
                dailyHours + ' h',
            ];
        });

        const totalWeeklyHours = tableData.reduce((sum, row) => sum + parseFloat(row[6] || 0), 0);
        console.log('PDFExport: Table data for employee summary:', tableData);

        autoTable(doc, {
            startY: 30,
            head: [['Jour', 'Employé', 'Arrivée', 'Pause', 'Retour', 'Sortie', 'Heures']],
            body: tableData,
            theme: 'grid',
            headStyles: { fillColor: [229, 229, 229], textColor: [0, 0, 0], fontStyle: 'bold' },
            styles: { font: 'Helvetica', fontSize: 10, cellPadding: 3, halign: 'left' },
            margin: { top: 30, left: 10, right: 10 },
            columnStyles: {
                0: { cellWidth: 60 },
                1: { cellWidth: 90 },
                2: { cellWidth: 60 },
                3: { cellWidth: 60 },
                4: { cellWidth: 60 },
                5: { cellWidth: 60 },
                6: { cellWidth: 70 },
            },
            didParseCell: (data) => {
                if (data.section === 'body') {
                    const dayIndex = days.indexOf(data.row.raw[0]);
                    if (dayIndex >= 0) {
                        data.row.cells[0].styles.fillColor = getCouleurJour(dayIndex);
                        data.row.cells[1].styles.fillColor = getCouleurJour(dayIndex);
                        data.row.cells[2].styles.fillColor = getCouleurJour(dayIndex);
                        data.row.cells[3].styles.fillColor = getCouleurJour(dayIndex);
                        data.row.cells[4].styles.fillColor = getCouleurJour(dayIndex);
                        data.row.cells[5].styles.fillColor = getCouleurJour(dayIndex);
                        data.row.cells[6].styles.fillColor = getCouleurJour(dayIndex);
                    }
                }
            },
        });

        // Ajouter un tableau des tranches horaires assignées
        let y = doc.lastAutoTable.finalY + 10;
        doc.text('Tranches horaires assignées', 10, y);
        y += 10;

        days.forEach((day, index) => {
            const slots = [
                ...(timeSlotConfig.morning || []),
                ...(timeSlotConfig.earlyAfternoon || []),
                ...(timeSlotConfig.lateAfternoon || []),
                ...(timeSlotConfig.earlyEvening || []),
                ...(timeSlotConfig.lateEvening || []),
            ].filter(slot => slot);

            const assignedSlots = slots.filter(slot => planning[`${day}_${slot}_${employee}`]);
            if (assignedSlots.length > 0) {
                doc.setFillColor(getCouleurJour(index, 'day-date'));
                doc.rect(10, y, 190, 8, 'F');
                doc.setTextColor(0, 0, 0);
                doc.text(day, 12, y + 6);
                y += 10;

                autoTable(doc, {
                    startY: y,
                    head: [['Tranche horaire']],
                    body: assignedSlots.map(slot => [slot]),
                    theme: 'grid',
                    headStyles: { fillColor: [229, 229, 229], textColor: [0, 0, 0], fontStyle: 'bold' },
                    styles: { font: 'Helvetica', fontSize: 10, cellPadding: 3, halign: 'left' },
                    margin: { left: 10, right: 10 },
                    columnStyles: { 0: { cellWidth: 190 } },
                    didParseCell: (data) => {
                        if (data.section === 'body') {
                            data.row.cells[0].styles.fillColor = getCouleurJour(index);
                        }
                    },
                });
                y = doc.lastAutoTable.finalY + 5;
            }
        });

        doc.text(`Total heures semaine: ${totalWeeklyHours} h`, 10, y);
        doc.text('© Nicolas Lefèvre 2025 Klick Planning', 10, y + 10);
        doc.save(`${employee}_summary_${selectedWeek}.pdf`);
        console.log('PDFExport: Generated employee summary PDF for', employee);
    } catch (error) {
        console.error('PDFExport: Error generating employee summary PDF:', error);
        alert('Erreur lors de la génération du PDF récapitulatif pour l’employé: ' + error.message);
    }
};

const exportEmployeeScheduleToPDF = (employee, planning, timeSlotConfig, selectedShop, selectedWeek, days, getCouleurJour) => {
    try {
        if (!employee || !planning || !timeSlotConfig || !selectedShop || !selectedWeek || !days || !getCouleurJour) {
            throw new Error('Missing required parameters');
        }

        const doc = new jsPDF({ format: 'a4' });
        doc.setFont('Helvetica', 'normal');
        doc.setFontSize(12);
        doc.text(`Planning de ${employee} - ${selectedShop}`, 10, 10);
        doc.text(`Semaine du ${format(new Date(selectedWeek), 'dd/MM/yy', { locale: fr })}`, 10, 20);

        let y = 30;
        days.forEach((day, index) => {
            doc.setFillColor(getCouleurJour(index, 'day-date'));
            doc.rect(10, y, 190, 8, 'F');
            doc.setTextColor(0, 0, 0);
            doc.text(day, 12, y + 6);

            y += 10;
            const slots = [
                ...(timeSlotConfig.morning || []),
                ...(timeSlotConfig.earlyAfternoon || []),
                ...(timeSlotConfig.lateAfternoon || []),
                ...(timeSlotConfig.earlyEvening || []),
                ...(timeSlotConfig.lateEvening || []),
            ].filter(slot => slot);

            slots.forEach((slot) => {
                const key = `${day}_${slot}_${employee}`;
                if (planning[key]) {
                    doc.text(slot, 12, y);
                    y += 6;
                }
            });
            y += 5;
        });

        const totalHours = days.reduce((total, day) => {
            const slots = [
                ...(timeSlotConfig.morning || []),
                ...(timeSlotConfig.earlyAfternoon || []),
                ...(timeSlotConfig.lateAfternoon || []),
                ...(timeSlotConfig.earlyEvening || []),
                ...(timeSlotConfig.lateEvening || []),
            ].filter(slot => slot);

            return total + slots.reduce((sum, slot) => {
                const key = `${day}_${slot}_${employee}`;
                if (planning[key]) {
                    const [start, end] = slot.split('-');
                    const startMinutes = parseInt(start.split(':')[0]) * 60 + parseInt(start.split(':')[1]);
                    const endMinutes = end === '24:00' ? 24 * 60 : parseInt(end.split(':')[0]) * 60 + parseInt(end.split(':')[1]);
                    return sum + (endMinutes - startMinutes) / 60;
                }
                return sum;
            }, 0);
        }, 0);

        doc.text(`Total heures: ${totalHours} h`, 10, y);
        doc.text('© Nicolas Lefèvre 2025 Klick Planning', 10, y + 10);
        doc.save(`${employee}_planning_${selectedWeek}.pdf`);
        console.log('PDFExport: Generated employee PDF for', employee);
    } catch (error) {
        console.error('PDFExport: Error generating employee PDF:', error);
        alert('Erreur lors de la génération du PDF pour l’employé: ' + error.message);
    }
};

const exportShopScheduleToPDF = (employees, planning, timeSlotConfig, selectedShop, selectedWeek, days, getCouleurJour) => {
    try {
        if (!employees || !planning || !timeSlotConfig || !selectedShop || !selectedWeek || !days || !getCouleurJour) {
            throw new Error('Missing required parameters');
        }

        const doc = new jsPDF({ format: 'a4' });
        doc.setFont('Helvetica', 'normal');
        doc.setFontSize(12);
        doc.text(`Planning de ${selectedShop}`, 10, 10);
        doc.text(`Semaine du ${format(new Date(selectedWeek), 'dd/MM/yy', { locale: fr })}`, 10, 20);

        let y = 30;
        days.forEach((day, index) => {
            doc.setFillColor(getCouleurJour(index, 'day-date'));
            doc.rect(10, y, 190, 8, 'F');
            doc.setTextColor(0, 0, 0);
            doc.text(day, 12, y + 6);

            y += 10;
            employees.forEach((employee) => {
                doc.text(employee, 12, y);
                let x = 50;
                const slots = [
                    ...(timeSlotConfig.morning || []),
                    ...(timeSlotConfig.earlyAfternoon || []),
                    ...(timeSlotConfig.lateAfternoon || []),
                    ...(timeSlotConfig.earlyEvening || []),
                    ...(timeSlotConfig.lateEvening || []),
                ].filter(slot => slot);

                slots.forEach((slot) => {
                    const key = `${day}_${slot}_${employee}`;
                    if (planning[key]) {
                        doc.text(slot, x, y);
                        x += 30;
                    }
                });
                y += 6;
            });
            y += 5;
        });

        doc.text('© Nicolas Lefèvre 2025 Klick Planning', 10, y + 10);
        doc.save(`${selectedShop}_planning_${selectedWeek}.pdf`);
        console.log('PDFExport: Generated shop PDF for', selectedShop);
    } catch (error) {
        console.error('PDFExport: Error generating shop PDF:', error);
        alert('Erreur lors de la génération du PDF pour la boutique: ' + error.message);
    }
};

const exportWeeklySummaryToPDF = (employees, planning, timeSlotConfig, selectedShop, selectedWeek, days, getCouleurJour) => {
    try {
        if (!employees || !planning || !timeSlotConfig || !selectedShop || !selectedWeek || !days || !getCouleurJour) {
            throw new Error('Missing required parameters');
        }

        const doc = new jsPDF({ format: 'a4' });
        doc.setFont('Helvetica', 'normal');
        doc.setFontSize(12);
        const monday = new Date(selectedWeek);
        const sunday = addDays(monday, 6);
        doc.text(`Récapitulatif de ${selectedShop}`, 10, 10);
        doc.text(`Semaine du lundi ${format(monday, 'dd MMMM', { locale: fr })} au dimanche ${format(sunday, 'dd MMMM', { locale: fr })}`, 10, 20);

        let y = 30;
        days.forEach((day, index) => {
            const tableData = employees.map((employee) => {
                const slots = [
                    ...(timeSlotConfig.morning || []),
                    ...(timeSlotConfig.earlyAfternoon || []),
                    ...(timeSlotConfig.lateAfternoon || []),
                    ...(timeSlotConfig.earlyEvening || []),
                    ...(timeSlotConfig.lateEvening || []),
                ].filter(slot => slot);

                let dailyHours = 0;
                let entry = '', pause = '', retour = '', sortie = '';

                const assignedSlots = slots.filter(slot => planning[`${day}_${slot}_${employee}`]);
                if (assignedSlots.length > 0) {
                    entry = assignedSlots[0].split('-')[0];
                    sortie = assignedSlots[assignedSlots.length - 1].split('-')[1];
                    if (assignedSlots.length > 1) {
                        for (let i = 0; i < assignedSlots.length - 1; i++) {
                            const currentEnd = assignedSlots[i].split('-')[1];
                            const nextStart = assignedSlots[i + 1].split('-')[0];
                            const currentEndTime = parseInt(currentEnd.replace(':', ''));
                            const nextStartTime = parseInt(nextStart.replace(':', ''));
                            if (nextStartTime - currentEndTime >= 100) {
                                pause = currentEnd;
                                retour = nextStart;
                                break;
                            }
                        }
                    }
                    if (!pause) {
                        pause = sortie;
                        retour = '-';
                    }
                }

                dailyHours = assignedSlots.reduce((sum, slot) => {
                    const [start, end] = slot.split('-');
                    const startMinutes = parseInt(start.split(':')[0]) * 60 + parseInt(start.split(':')[1]);
                    const endMinutes = end === '24:00' ? 24 * 60 : parseInt(end.split(':')[0]) * 60 + parseInt(end.split(':')[1]);
                    return sum + (endMinutes - startMinutes) / 60;
                }, 0);

                return [
                    day,
                    employee,
                    entry || 'Repos',
                    pause || '-',
                    retour || '-',
                    sortie || '-',
                    dailyHours + ' h',
                ];
            });

            doc.setFillColor(getCouleurJour(index, 'day-date'));
            doc.rect(10, y, 190, 8, 'F');
            doc.setTextColor(0, 0, 0);
            doc.text(day, 12, y + 6);
            y += 10;

            autoTable(doc, {
                startY: y,
                head: [['Jour', 'Employé', 'Arrivée', 'Pause', 'Retour', 'Sortie', 'Heures']],
                body: tableData,
                theme: 'grid',
                headStyles: { fillColor: [229, 229, 229], textColor: [0, 0, 0], fontStyle: 'bold' },
                styles: { font: 'Helvetica', fontSize: 10, cellPadding: 3, halign: 'left' },
                margin: { left: 10, right: 10 },
                columnStyles: {
                    0: { cellWidth: 60 },
                    1: { cellWidth: 90 },
                    2: { cellWidth: 60 },
                    3: { cellWidth: 60 },
                    4: { cellWidth: 60 },
                    5: { cellWidth: 60 },
                    6: { cellWidth: 70 },
                },
                didParseCell: (data) => {
                    if (data.section === 'body') {
                        const dayIndex = days.indexOf(data.row.raw[0]);
                        if (dayIndex >= 0) {
                            data.row.cells[0].styles.fillColor = getCouleurJour(dayIndex);
                            data.row.cells[1].styles.fillColor = getCouleurJour(dayIndex);
                            data.row.cells[2].styles.fillColor = getCouleurJour(dayIndex);
                            data.row.cells[3].styles.fillColor = getCouleurJour(dayIndex);
                            data.row.cells[4].styles.fillColor = getCouleurJour(dayIndex);
                            data.row.cells[5].styles.fillColor = getCouleurJour(dayIndex);
                            data.row.cells[6].styles.fillColor = getCouleurJour(dayIndex);
                        }
                    }
                },
            });

            y = doc.lastAutoTable.finalY + 10; // Ligne d’espace
        });

        // Total des heures par employé pour la semaine
        const totalTableData = employees.map((employee) => {
            const totalHours = days.reduce((total, day) => {
                const slots = [
                    ...(timeSlotConfig.morning || []),
                    ...(timeSlotConfig.earlyAfternoon || []),
                    ...(timeSlotConfig.lateAfternoon || []),
                    ...(timeSlotConfig.earlyEvening || []),
                    ...(timeSlotConfig.lateEvening || []),
                ].filter(slot => slot);

                return total + slots.reduce((sum, slot) => {
                    const key = `${day}_${slot}_${employee}`;
                    if (planning[key]) {
                        const [start, end] = slot.split('-');
                        const startMinutes = parseInt(start.split(':')[0]) * 60 + parseInt(start.split(':')[1]);
                        const endMinutes = end ===